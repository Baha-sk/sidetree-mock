// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Header header
// swagger:model Header
type Header struct {

	// alg
	// Required: true
	Alg *string `json:"alg"`

	// kid
	// Required: true
	Kid *string `json:"kid"`

	// operation
	// Required: true
	Operation OperationType `json:"operation"`
}

// Validate validates this header
func (m *Header) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Header) validateAlg(formats strfmt.Registry) error {

	if err := validate.Required("alg", "body", m.Alg); err != nil {
		return err
	}

	return nil
}

func (m *Header) validateKid(formats strfmt.Registry) error {

	if err := validate.Required("kid", "body", m.Kid); err != nil {
		return err
	}

	return nil
}

func (m *Header) validateOperation(formats strfmt.Registry) error {

	if err := m.Operation.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("operation")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Header) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Header) UnmarshalBinary(b []byte) error {
	var res Header
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
